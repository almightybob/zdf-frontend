input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type ComponentBasicLink {
  id: ID!
  plattform: ENUM_COMPONENTBASICLINK_PLATTFORM
  url: String!
}

input ComponentBasicLinkFiltersInput {
  and: [ComponentBasicLinkFiltersInput]
  not: ComponentBasicLinkFiltersInput
  or: [ComponentBasicLinkFiltersInput]
  plattform: StringFilterInput
  url: StringFilterInput
}

input ComponentBasicLinkInput {
  id: ID
  plattform: ENUM_COMPONENTBASICLINK_PLATTFORM
  url: String
}

type ComponentLayoutBlock {
  content: String
  header: String
  id: ID!
  media: UploadFileEntityResponse
}

input ComponentLayoutBlockFiltersInput {
  and: [ComponentLayoutBlockFiltersInput]
  content: StringFilterInput
  header: StringFilterInput
  not: ComponentLayoutBlockFiltersInput
  or: [ComponentLayoutBlockFiltersInput]
}

input ComponentLayoutBlockInput {
  content: String
  header: String
  id: ID
  media: ID
}

type ComponentLayoutCard {
  content: String
  header: String
  id: ID!
  image: UploadFileEntityResponse
}

input ComponentLayoutCardFiltersInput {
  and: [ComponentLayoutCardFiltersInput]
  content: StringFilterInput
  header: StringFilterInput
  not: ComponentLayoutCardFiltersInput
  or: [ComponentLayoutCardFiltersInput]
}

input ComponentLayoutCardInput {
  content: String
  header: String
  id: ID
  image: ID
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTBASICLINK_PLATTFORM {
  email
  eventfrog
  facebook
  fbevent
  instagram
  linkedin
  telegram
  website
  whatsapp
}

type EmailDesignerEmailTemplate {
  bodyHtml: String
  bodyText: String
  createdAt: DateTime
  design: JSON
  enabled: Boolean
  name: String
  subject: String
  tags: JSON
  templateReferenceId: Int
  updatedAt: DateTime
}

type EmailDesignerEmailTemplateEntity {
  attributes: EmailDesignerEmailTemplate
  id: ID
}

type EmailDesignerEmailTemplateEntityResponse {
  data: EmailDesignerEmailTemplateEntity
}

type EmailDesignerEmailTemplateEntityResponseCollection {
  data: [EmailDesignerEmailTemplateEntity!]!
  meta: ResponseCollectionMeta!
}

input EmailDesignerEmailTemplateFiltersInput {
  and: [EmailDesignerEmailTemplateFiltersInput]
  bodyHtml: StringFilterInput
  bodyText: StringFilterInput
  createdAt: DateTimeFilterInput
  design: JSONFilterInput
  enabled: BooleanFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: EmailDesignerEmailTemplateFiltersInput
  or: [EmailDesignerEmailTemplateFiltersInput]
  subject: StringFilterInput
  tags: JSONFilterInput
  templateReferenceId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input EmailDesignerEmailTemplateInput {
  bodyHtml: String
  bodyText: String
  design: JSON
  enabled: Boolean
  name: String
  subject: String
  tags: JSON
  templateReferenceId: Int
}

type Event {
  byus: Boolean
  content(filters: ComponentLayoutBlockFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLayoutBlock]
  cover: UploadFileEntityResponse!
  createdAt: DateTime
  desc: String
  end: DateTime
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  humans(filters: HumanFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): HumanRelationResponseCollection
  links(filters: ComponentBasicLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBasicLink]
  publishedAt: DateTime
  slug: String
  start: DateTime!
  subtitle: String
  title: String!
  updatedAt: DateTime
}

type EventEntity {
  attributes: Event
  id: ID
}

type EventEntityResponse {
  data: EventEntity
}

type EventEntityResponseCollection {
  data: [EventEntity!]!
  meta: ResponseCollectionMeta!
}

input EventFiltersInput {
  and: [EventFiltersInput]
  byus: BooleanFilterInput
  content: ComponentLayoutBlockFiltersInput
  createdAt: DateTimeFilterInput
  desc: StringFilterInput
  end: DateTimeFilterInput
  humans: HumanFiltersInput
  id: IDFilterInput
  links: ComponentBasicLinkFiltersInput
  not: EventFiltersInput
  or: [EventFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  start: DateTimeFilterInput
  subtitle: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input EventInput {
  byus: Boolean
  content: [ComponentLayoutBlockInput]
  cover: ID
  desc: String
  end: DateTime
  gallery: [ID]
  humans: [ID]
  links: [ComponentBasicLinkInput]
  publishedAt: DateTime
  slug: String
  start: DateTime
  subtitle: String
  title: String
}

type EventRelationResponseCollection {
  data: [EventEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

"""Union Type of all registered slug content types"""
union FindSlugResponse = EventEntityResponse | HumanEntityResponse | PostEntityResponse

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = ComponentBasicLink | ComponentLayoutBlock | ComponentLayoutCard | EmailDesignerEmailTemplate | Event | Human | I18NLocale | Page | Post | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Human {
  avatar: UploadFileEntityResponse
  bio: String!
  createdAt: DateTime
  events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventRelationResponseCollection
  links(filters: ComponentBasicLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBasicLink]
  name: String!
  position: String
  publishedAt: DateTime
  slug: String
  updatedAt: DateTime
}

type HumanEntity {
  attributes: Human
  id: ID
}

type HumanEntityResponse {
  data: HumanEntity
}

type HumanEntityResponseCollection {
  data: [HumanEntity!]!
  meta: ResponseCollectionMeta!
}

input HumanFiltersInput {
  and: [HumanFiltersInput]
  bio: StringFilterInput
  createdAt: DateTimeFilterInput
  events: EventFiltersInput
  id: IDFilterInput
  links: ComponentBasicLinkFiltersInput
  name: StringFilterInput
  not: HumanFiltersInput
  or: [HumanFiltersInput]
  position: StringFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input HumanInput {
  avatar: ID
  bio: String
  events: [ID]
  links: [ComponentBasicLinkInput]
  name: String
  position: String
  publishedAt: DateTime
  slug: String
}

type HumanRelationResponseCollection {
  data: [HumanEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createEmailDesignerEmailTemplate(data: EmailDesignerEmailTemplateInput!): EmailDesignerEmailTemplateEntityResponse
  createEvent(data: EventInput!): EventEntityResponse
  createHuman(data: HumanInput!): HumanEntityResponse
  createPage(data: PageInput!): PageEntityResponse
  createPost(data: PostInput!): PostEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteEmailDesignerEmailTemplate(id: ID!): EmailDesignerEmailTemplateEntityResponse
  deleteEvent(id: ID!): EventEntityResponse
  deleteHuman(id: ID!): HumanEntityResponse
  deletePage(id: ID!): PageEntityResponse
  deletePost(id: ID!): PostEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateEmailDesignerEmailTemplate(data: EmailDesignerEmailTemplateInput!, id: ID!): EmailDesignerEmailTemplateEntityResponse
  updateEvent(data: EventInput!, id: ID!): EventEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateHuman(data: HumanInput!, id: ID!): HumanEntityResponse
  updatePage(data: PageInput!, id: ID!): PageEntityResponse
  updatePost(data: PostInput!, id: ID!): PostEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Page {
  blocks(filters: ComponentLayoutBlockFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLayoutBlock]
  cards(filters: ComponentLayoutCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentLayoutCard]
  cover: UploadFileEntityResponse
  createdAt: DateTime
  publishedAt: DateTime
  subtitle: String
  title: String
  updatedAt: DateTime
}

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  and: [PageFiltersInput]
  blocks: ComponentLayoutBlockFiltersInput
  cards: ComponentLayoutCardFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  publishedAt: DateTimeFilterInput
  subtitle: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  blocks: [ComponentLayoutBlockInput]
  cards: [ComponentLayoutCardInput]
  cover: ID
  publishedAt: DateTime
  subtitle: String
  title: String
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Post {
  author: UsersPermissionsUserEntityResponse
  content: String!
  createdAt: DateTime
  date: Date
  gallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  image: UploadFileEntityResponse
  publishedAt: DateTime
  slug: String
  subtitle: String
  title: String!
  updatedAt: DateTime
}

type PostEntity {
  attributes: Post
  id: ID
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

input PostFiltersInput {
  and: [PostFiltersInput]
  author: UsersPermissionsUserFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  date: DateFilterInput
  id: IDFilterInput
  not: PostFiltersInput
  or: [PostFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  subtitle: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PostInput {
  author: ID
  content: String
  date: Date
  gallery: [ID]
  image: ID
  publishedAt: DateTime
  slug: String
  subtitle: String
  title: String
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  emailDesignerEmailTemplate(id: ID): EmailDesignerEmailTemplateEntityResponse
  emailDesignerEmailTemplates(filters: EmailDesignerEmailTemplateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): EmailDesignerEmailTemplateEntityResponseCollection
  event(id: ID, slug: String!): EventEntityResponse
  events(filters: EventFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): EventEntityResponseCollection
  findSlug(modelName: String, publicationState: String, slug: String): FindSlugResponse
  human(id: ID, slug: String!): HumanEntityResponse
  humans(filters: HumanFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): HumanEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  page(id: ID): PageEntityResponse
  pages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  post(id: ID, slug: String!): PostEntityResponse
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostRelationResponseCollection
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  posts: PostFiltersInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  posts: [ID]
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
